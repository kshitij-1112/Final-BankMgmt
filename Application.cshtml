@model BankLoanProject.Models.LoanApplicationViewModel
@{
    var role = Context.Session.GetString("Role");
}

<link rel="stylesheet" href="~/css/loan-application-styles.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Header -->
<div class="header-container">
    <h1><i class="fas fa-file-invoice-dollar me-3"></i>Loan Application Portal</h1>
    <p class="mb-0">Apply for a new loan or manage your existing applications</p>
</div>

<!-- Apply Button -->
@if (role == "Customer")
{
    <button type="button" class="btn btn-apply mt-auto" id="applyForLoanButton" data-bs-toggle="modal" data-bs-target="#loanApplicationModal">
        <i class="fas fa-plus-circle me-2"></i>Apply for Loan
    </button>
}

<!-- Refresh Button -->
<div class="d-flex">
    <button type="button" class="btn btn-refresh ms-auto" id="refreshButton" onclick="location.reload();">
        <i class="fas fa-sync-alt"></i>Refresh
    </button>
</div>

<!-- Table Controls -->
<div class="table-control-container">
    <div class="d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <span class="control-label"><i class="fas fa-list-ol me-2"></i>Rows per page:</span>
            <select id="rowsPerPage" class="form-select d-inline-block" style="width: 80px;">
                <option value="5">5</option>
                <option value="10" selected>10</option>
                <option value="15">15</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
        </div>
        <div class="search-container">
            <input type="text" class="form-control" placeholder="Search applications..." id="searchInput">
        </div>
    </div>
</div>

<!-- Table -->
<div class="table-container">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th scope="col"><i class="fas fa-hashtag me-2"></i>Application ID</th>
                @if (role == "Admin")
                {
                    <th scope="col"><i class="fas fa-user me-2"></i>Customer ID</th>
                    <th scope="col"><i class="fas fa-user-tag me-2"></i>Name</th>
                }
                <th scope="col"><i class="fas fa-tag me-2"></i>Product Type</th>
                <th scope="col"><i class="fas fa-box me-2"></i>Product Name</th>
                <th scope="col"><i class="fas fa-percentage me-2"></i>Interest Rate</th>
                <th scope="col"><i class="fas fa-hourglass-half me-2"></i>Tenure</th>
                <th scope="col"><i class="fas fa-rupee-sign me-2"></i>Loan Amount</th>
                <th scope="col"><i class="fas fa-calendar-alt me-2"></i>Application Date</th>
                <th scope="col"><i class="fas fa-info-circle me-2"></i>Status</th>
                @if (role == "Admin")
                {
                    <th scope="col"><i class="fas fa-cogs me-2"></i>Actions</th>
                }
            </tr>
        </thead>
        <tbody id="table-body">
            @if (ViewBag.ApplicationList != null)
            {
                @foreach (var app in ViewBag.ApplicationList)
                {
                    <tr>
                        <td>@app.ApplicationId</td>
                        @if (role == "Admin")
                        {
                            <td>@app.CustomerId</td>
                            <td>@app.Name</td>
                        }
                        <td>
                            @{
                                string productIcon = "";
                                switch (app.ProductType?.ToLower())
                                {
                                    case "vehicle loan":
                                        productIcon = "fas fa-car";
                                        break;
                                    case "home loan":
                                        productIcon = "fas fa-home";
                                        break;
                                    case "personal loan":
                                        productIcon = "fas fa-user";
                                        break;
                                    case "business loan":
                                        productIcon = "fas fa-briefcase";
                                        break;
                                    case "education loan":
                                        productIcon = "fas fa-graduation-cap";
                                        break;
                                    default:
                                        productIcon = "fas fa-tag";
                                        break;
                                }
                            }
                            <i class="@productIcon product-icon"></i>@app.ProductType
                        </td>
                        <td>@app.ProductName</td>
                        <td>@app.InterestRate?.ToString()%</td>
                        <td>@app.LoanTenure months</td>
                        <td>â‚¹@app.LoanAmount?.ToString("N0")</td>
                        <td>@app.ApplicationDate?.ToString("dd-MM-yyyy")</td>
                        <td>
                            @{
                                string statusClass = "";
                                string statusIcon = "";
                                switch (app.ApprovalStatus?.ToLower())
                                {
                                    case "approved":
                                        statusClass = "status-approved";
                                        statusIcon = "fas fa-check-circle";
                                        break;
                                    case "pending":
                                        statusClass = "status-pending";
                                        statusIcon = "fas fa-clock";
                                        break;
                                    case "rejected":
                                        statusClass = "status-rejected";
                                        statusIcon = "fas fa-times-circle";
                                        break;
                                    default:
                                        statusClass = "status-pending";
                                        statusIcon = "fas fa-clock";
                                        break;
                                }
                            }
                            <span class="status-badge @statusClass">
                                <i class="@statusIcon me-1"></i>@app.ApprovalStatus
                            </span>
                        </td>
                        @if (role == "Admin")
                        {
                            <td>
                                <div class="d-flex gap-2">
                                    <button type="button" class="btn btn-action btn-process" data-id="@app.CustomerId" data-bs-toggle="modal" data-bs-target="#processApplicationModal">
                                        <i class="fas fa-cog me-1"></i>Process
                                    </button>
                                </div>
                            </td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="@(role == "Admin" ? "11" : "8")" class="text-center">
                        <i class="fas fa-inbox me-2"></i>No applications found.
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination -->
    <div class="d-flex justify-content-center align-items-center pagination-container flex-wrap gap-2">
        <button type="button" class="btn btn-pagination" id="firstPageBtn" title="First Page">
            <i class="fas fa-angle-double-left"></i>
        </button>
        <button type="button" class="btn btn-pagination" id="prevPageBtn" title="Previous Page">
            <i class="fas fa-angle-left"></i>
        </button>
        <div id="pageNumbers" class="d-flex flex-wrap gap-1"></div>
        <button type="button" class="btn btn-pagination" id="nextPageBtn" title="Next Page">
            <i class="fas fa-angle-right"></i>
        </button>
        <button type="button" class="btn btn-pagination" id="lastPageBtn" title="Last Page">
            <i class="fas fa-angle-double-right"></i>
        </button>
    </div>

    <div class="d-flex mt-3">
        <div id="showingEntries"></div>
    </div>
</div>

<!-- Loan Application Modal -->
<div class="modal fade" id="loanApplicationModal" tabindex="-1" aria-labelledby="loanApplicationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <form id="loanApplicationForm" method="post" asp-action="ApplyForLoan" asp-controller="LoanApplication">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="loanModalLabel">
                        <i class="fas fa-file-signature me-2"></i>Loan Application
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-tag me-2"></i>Product Type:
                        </label>
                        <select class="form-control" id="productTypeDropdown" name="ProductType">
                            <option value="">-- Select Product Type --</option>
                            @foreach (var type in ViewBag.ProductTypes as List<string>)
                            {
                                <option value="@type">@type</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label asp-for="LoanProductId" class="form-label">
                            <i class="fas fa-box me-2"></i>Product Name:
                        </label>
                        <select asp-for="LoanProductId" class="form-control" id="productNameDropdown">
                            <option value="">-- Select Product Name --</option>
                        </select>
                        <span asp-validation-for="LoanProductId" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="LoanAmount" class="form-label">
                            <i class="fas fa-rupee-sign me-2"></i>Loan Amount:
                        </label>
                        <input asp-for="LoanAmount" type="number" class="form-control" placeholder="Enter loan amount" />
                        <span asp-validation-for="LoanAmount" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="LoanTenure" class="form-label">
                            <i class="fas fa-hourglass-half me-2"></i>Tenure (months):
                        </label>
                        <input asp-for="LoanTenure" type="number" class="form-control" placeholder="Enter loan tenure" />
                        <span asp-validation-for="LoanTenure" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-form-submit" name="submitType" value="Submit">
                        <i class="fas fa-check-circle me-2"></i>Submit Application
                    </button>
                    <button type="button" class="btn btn-form-cancel" data-bs-dismiss="modal">
                        <i class="fas fa-times-circle me-2"></i>Close
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Process Application Modal -->
<div class="modal fade" id="processApplicationModal" tabindex="-1" aria-labelledby="processApplicationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="processApplicationModalLabel">
                    <i class="fas fa-file-signature me-2"></i>Loan Application Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table table-borderless mb-3">
                    <tbody>
                        <tr>
                            <th scope="row" class="w-50"><i class="fas fa-user me-2"></i>Customer ID:</th>
                            <td id="processCustId"></td>
                        </tr>
                        <tr>
                            <th scope="row" class="w-50"><i class="fas fa-user-tag me-2"></i>Name:</th>
                            <td id="processName"></td>
                        </tr>
                        <tr>
                            <th scope="row" class="w-50"><i class="fas fa-percentage me-2"></i>Interest Rate:</th>
                            <td id="processIR"></td>
                        </tr>
                        <tr>
                            <th scope="row" class="w-50"><i class="fas fa-hourglass-half me-2"></i>Tenure:</th>
                            <td id="processTenure"></td>
                        </tr>
                        <tr>
                            <th scope="row" class="w-50"><i class="fas fa-tag me-2"></i>Product Type:</th>
                            <td id="processProduct"></td>
                        </tr>
                        <tr>
                            <th scope="row" class="w-50"><i class="fas fa-box me-2"></i>Product Name:</th>
                            <td id="processProductName"></td>
                        </tr>
                        <tr>
                            <th scope="row" class="w-50"><i class="fas fa-rupee-sign me-2"></i>Loan Amount:</th>
                            <td id="processLoanAmount"></td>
                        </tr>
                        <tr>
                            <th scope="row" class="w-50"><i class="fas fa-calendar-alt me-2"></i>Application Date:</th>
                            <td id="processApplicationDate"></td>
                        </tr>
                        <tr>
                            <th scope="row" class="w-50"><i class="fas fa-info-circle me-2"></i>Approval Status:</th>
                            <td id="processStatusText"></td>
                        </tr>
                    </tbody>
                </table>

                <div class="form-group">
                    <label for="processStatus" class="form-label">
                        <i class="fas fa-edit me-2"></i>Update Status:
                    </label>
                    <select id="processStatus" class="form-select">
                        <option value="Approved">Approve</option>
                        <option value="Pending">Pending</option>
                        <option value="Rejected">Reject</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-form-cancel" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Close
                </button>
                <button type="button" class="btn btn-form-submit" id="saveProcessStatusBtn" data-bs-dismiss="modal">
                    <i class="fas fa-save me-2"></i>Save
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize pagination
            initializePagination();
            
            // Product type dropdown change handler
            $('#productTypeDropdown').change(function () {
                var selectedType = $(this).val();
                var productNameDropdown = $('#productNameDropdown');
                
                productNameDropdown.empty().append('<option value="">-- Loading... --</option>');
                
                if (selectedType) {
                    $.getJSON('/LoanApplication/GetProductNamesByType', { productType: selectedType }, function (data) {
                        productNameDropdown.empty().append('<option value="">-- Select Product Name --</option>');
                        $.each(data, function (i, item) {
                            productNameDropdown.append($('<option>', {
                                value: item.value,
                                text: item.text
                            }));
                        });
                    });
                } else {
                    productNameDropdown.empty().append('<option value="">-- Select Product Name --</option>');
                }
            });

            // Process button click handler
            $(document).on('click', '.btn-process', function () {
                const customerId = $(this).data('id');
                
                $.ajax({
                    url: '/LoanApplication/GetApplicationDetails',
                    type: 'GET',
                    data: { customerId: customerId },
                    success: function (data) {
                        if (data) {
                            $('#processCustId').text(data.customerId);
                            $('#processName').text(data.name);
                            $('#processIR').text(data.interestRate + '%');
                            $('#processTenure').text(data.loanTenure + ' months');
                            $('#processProduct').text(data.productType);
                            $('#processProductName').text(data.productName);
                            $('#processLoanAmount').text('â‚¹' + data.loanAmount?.toLocaleString('en-IN'));
                            $('#processApplicationDate').text(data.applicationDate);
                            $('#processStatusText').text(data.approvalStatus);
                            $('#processStatus').val(data.approvalStatus);
                            $('#saveProcessStatusBtn').data('application-id', data.applicationId);
                        }
                    }
                });
            });
            
            // Save process status button click handler
            $('#saveProcessStatusBtn').on('click', function () {
                const applicationId = $(this).data('application-id');
                const newStatus = $('#processStatus').val();
                
                $.ajax({
                    url: '/LoanApplication/UpdateStatus',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ applicationId: applicationId, status: newStatus }),
                    success: function (response) {
                        alert(response.message);
                        location.reload(); // Refresh to reflect changes
                    }
                });
            });
        });

        // Pagination functionality
        function initializePagination() {
            const tableBody = $('#table-body');
            const rowsPerPageInput = $('#rowsPerPage');
            const searchInput = $('#searchInput');
            const firstPageBtn = $('#firstPageBtn');
            const prevPageBtn = $('#prevPageBtn');
            const nextPageBtn = $('#nextPageBtn');
            const lastPageBtn = $('#lastPageBtn');
            const showingEntries = $('#showingEntries');

            let currentPage = 1;
            let rowsPerPage = parseInt(rowsPerPageInput.val());
            let allRows = tableBody.find('tr').toArray();
            let filteredRows = [...allRows];

            function renderTable() {
                tableBody.empty();
                const start = (currentPage - 1) * rowsPerPage;
                const end = Math.min(start + rowsPerPage, filteredRows.length);
                const paginatedRows = filteredRows.slice(start, end);

                paginatedRows.forEach(row => {
                    tableBody.append(row);
                });

                // Update pagination buttons state
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                firstPageBtn.prop('disabled', currentPage === 1);
                prevPageBtn.prop('disabled', currentPage === 1);
                nextPageBtn.prop('disabled', currentPage >= totalPages);
                lastPageBtn.prop('disabled', currentPage >= totalPages);

                // Render page number buttons
                renderPageNumbers();

                // Update showing entries text
                if (filteredRows.length > 0) {
                    showingEntries.html(`<i class="fas fa-info-circle me-2"></i>Showing ${start + 1} to ${end} of ${filteredRows.length} entries`);
                } else {
                    showingEntries.html('<i class="fas fa-info-circle me-2"></i>No matching records found');
                }
            }

            function renderPageNumbers() {
                const pageNumbersContainer = $('#pageNumbers');
                pageNumbersContainer.empty();

                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                const maxPageButtons = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
                let endPage = startPage + maxPageButtons - 1;

                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = Math.max(1, endPage - maxPageButtons + 1);
                }

                for (let i = startPage; i <= endPage; i++) {
                    const btn = $('<button></button>')
                        .addClass('btn btn-pagination')
                        .text(i)
                        .attr('data-page', i);

                    if (i === currentPage) {
                        btn.addClass('active');
                    }

                    pageNumbersContainer.append(btn);
                }
            }

            // Handle click on page number buttons
            $(document).on('click', '#pageNumbers button', function() {
                const selectedPage = parseInt($(this).attr('data-page'));
                if (selectedPage !== currentPage) {
                    currentPage = selectedPage;
                    renderTable();
                }
            });

            // Navigation buttons
            firstPageBtn.click(function() {
                currentPage = 1;
                renderTable();
            });

            prevPageBtn.click(function() {
                if (currentPage > 1) {
                    currentPage--;
                    renderTable();
                }
            });

            nextPageBtn.click(function() {
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    renderTable();
                }
            });

            lastPageBtn.click(function() {
                currentPage = Math.ceil(filteredRows.length / rowsPerPage);
                renderTable();
            });

            // Rows per page change
            rowsPerPageInput.change(function() {
                rowsPerPage = parseInt(rowsPerPageInput.val());
                currentPage = 1;
                renderTable();
            });

            // Search functionality
            searchInput.on('input', function() {
                const searchTerm = searchInput.val().toLowerCase();
                
                if (searchTerm === '') {
                    filteredRows = [...allRows];
                } else {
                    filteredRows = allRows.filter(row => {
                        const rowText = $(row).text().toLowerCase();
                        return rowText.includes(searchTerm);
                    });
                }
                
                currentPage = 1;
                renderTable();
            });

            // Initialize the table
            renderTable();
        }
    </script>
}
